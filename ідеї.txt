Відсоток від загального капіталу:
Визначте відсоток від вашого загального капіталу, який ви готові ризикувати на одній угоді. Наприклад, якщо у вас є $10,000 і ви готові ризикувати 2% на угоду, оптимальна сума буде $200.

Фіксована сума:
Встановіть фіксовану суму, яку ви готові інвестувати в кожну угоду. Наприклад, ви завжди інвестуєте $500 в кожну угоду, незалежно від розміру вашого портфеля.

Відсоток від волатильності:
Використовуйте історичну волатильність активу для визначення розміру позиції. Якщо актив дуже волатильний, ви можете вирішити інвестувати менший відсоток від вашого капіталу.

Метод Келлі:
Це математичний підхід, який визначає оптимальний розмір ставки на основі історичного виграшу та ймовірності виграшу. Цей метод може бути складним для застосування, але він може допомогти максимізувати прибуток при правильному застосуванні.

Метод величини потенційного втраченого капіталу:
Визначте максимальну суму, яку ви готові втратити на одній угоді, і використовуйте це як основу для визначення розміру позиції.

Адаптивний підхід:
Комбінуйте кілька з вищезазначених методів, адаптуючи розмір позиції в залежності від ринкових умов, вашого загального капіталу або інших факторів.

=========================================================================

Збір даних: Зберігайте історію всіх ваших арбітражних угод, включаючи прибуток/збиток, розмір різниці в ціні та інші важливі параметри.
Аналіз: Проаналізуйте свої дані, щоб визначити, при якому розмірі різниці в ціні ваши угоди, як правило, стають прибутковими. Наприклад, можливо, ви побачите, що угоди з різницею в ціні менше 0,5% часто приносять збитки, тоді як угоди з різницею в ціні понад 1% зазвичай приносять прибуток.

Встановлення порогового ліміту: На основі вашого аналізу встановіть пороговий ліміт. Наприклад, якщо ви визначили, що угоди з різницею в ціні понад 1% зазвичай приносять прибуток, ви можете встановити свій пороговий ліміт на 1%.

Тестування: Після встановлення порогового ліміту протестуйте його на реальних угодах або через імітаційну торгівлю. Зверніть увагу на кількість "хороших" та "поганих" угод, які ви робите з цим новим лімітом.

Ітерація: На основі результатів тестування внесіть корективи в свій пороговий ліміт та повторіть процес.

Врахування комісій: Пам'ятайте про комісії, які стягуються біржами. Навіть якщо різниця в ціні може здаватися прибутковою, комісії можуть з'їсти всю вашу прибутковість. Ваш пороговий ліміт повинен бути достатньо високим, щоб покрити ці комісії.

Моніторинг ринку: Ринок криптовалют постійно змінюється. То, що працювало вчора, може не працювати сьогодні. Регулярно перевіряйте свій пороговий ліміт та коригуйте його за потреби.

=========================================================================

Обробка помилок:
Додаткова логіка для обробки помилок, які можуть виникнути під час виконання замовлень.

Логіка для автоматичного вибору кращої ціни:
Наприклад, якщо ви хочете купити певну кількість активу, TransactionManager може автоматично вибирати кращу ціну з усіх доступних бірж.

Логіка для автоматичного балансування портфеля:
Якщо ви хочете підтримувати певний баланс між різними активами, TransactionManager може автоматично виконувати транзакції для досягнення цього балансу.

Логіка для автоматичного виведення коштів:
Якщо ви хочете автоматично виводити кошти, коли ваш баланс досягає певного порогу.

Логіка для автоматичного відслідковування прибутку/збитку:
Відстеження прибутку та збитку для кожної транзакції та зберігання цієї інформації для подальшого аналізу.

Запис кількості часу на виконнаня операції такі як знаходження арбітражної можливості, виконнаня угоди

=========================================================================

Версія 1.1: Асинхронний бот і Клас контролер
1. Переробка бота на асинхронний:
a. Дослідження і вибір асинхронних бібліотек для HTTP-запитів (наприклад, aiohttp).

b. Переписування всіх HTTP-запитів у боті на асинхронні.

c. Тестування асинхронної логіки на стабільність і швидкість відгуку.

d. Оптимізація коду та виправлення можливих помилок.

2. Клас контролер:
a. Розробка структури класу контролер.

b. Інтеграція інтерфейсу користувача для взаємодії з ботом.

c. Додавання методів для запуску, зупинки та налаштування бота.

d. Тестування класу контролер на коректність роботи.

=========================================================================

Версія 1.2: Триангулярний арбітраж
1. Триангулярний арбітраж:
a. Дослідження логіки триангулярного арбітражу.

b. Розробка алгоритму для виявлення можливостей триангулярного арбітражу.

c. Інтеграція алгоритму в основний код бота.

d. Додавання врахування комісій та інших витрат при виконанні триангулярного арбітражу.

e. Тестування нової логіки на демо-рахунках або на історичних даних.

=========================================================================

Додатковий план для оновлень:
Вивчення потреб користувачів: Збір відгуків від користувачів, щоб з'ясувати, які функції або покращення вони хочуть бачити в наступних версіях.

Оптимізація коду: Перегляд коду на предмет можливих місць для оптимізації, щоб покращити швидкість та ефективність бота.

Розширення підтримки бірж: Додавання підтримки нових бірж, щоб збільшити можливості для арбітражу.

Безпека: Перевірка коду на наявність можливих дір у безпеці та їх виправлення.

Документація: Створення або оновлення документації для користувачів та розробників.

=========================================================================

Врахування мінусів та бисторго закінчення балансу 

Перевод назад в долари а також продовження арбітражу (Можливо використовуючи Триангулярний арбітраж)